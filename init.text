title: Sistemi di Avvio
author: Andrea Brancaleoni

## Cos'è un Sistema di Avvio

Un sistema di *init*:

- Avvia/riavvia il computer
- Termina l'avvio dopo che il kernel è stato caricato
- Avvia altri programmi (DEMONI). (EG. Server Grafico, Server SQL o HTTP)

## Affidabilità

*Init* deve essere affidabile perchè:

- Gira in modalità super utente.
- Controlla servizi di sistema critici.
- *init* muore -> kernel panic.

## Recall: Demone

"I demoni sono personaggi della mitologia greca, alcuni dei quali eseguivano compiti di cui gli dei non potevano occuparsi" - Wikipedia

## Recall: Demone

![Demone](daemon.png)

## Linea Evolutiva

- Sistemi di avvio sequenziali: 
    * Ogni demone è avviato in sequenza.
    * Non esiste parallelismo
- Sistemi di avvio gerarchici: 
    * Forniscono funzionalità di avvio sequenziale
    * Forniscono parallelismo
    * Avviano servizi indipendenti in parallelo
- Sistemi di avvio Startless/Event Based: 
    * Forniscono funzionalità di avvio gerarchico
    * On-Demand Loading
    * Event Systems

## Linee Evolutive: Esempi

- Sistemi di avvio sequenziali:
    * System-V init
    * BSD-Style init
- Sistemi di avvio gerarchici:
    * OpenRC
    * InitNG
- Sistemi di avvio startless/event based:
    * Upstart
    * LaunchD
    * SystemD

## Linea Evolutive

![Linee Evolutive](timeline.png)

## System-V init

Cos'è:

* È un demone di init
* Sistema Standardizzato LSB
* Molte implementazioni esistenti
* Avvia i demoni
* Crea i processi leggendo da /etc/inittab

## sysvinit

È L'implementazione più famosa di System-V init.

Contiene anche:

- reboot
- shutdown
- killall
- poweroff
- tellinit
- sulogin
- wall

## LaunchD

Cos'è:

* Un framework open-source per gestire avvio/spegnimento di:
    - demoni
    - applicazioni
    - processi
    - script
* Scritto da Dave Zarzycki (Apple inc.)
* Licenza Apache (Inizialmente Apple Public License)

## Cosa sostituisce LaunchD

LaunchD sostituisce:

- init
- rc
- init.d script
- rc.d script
- SystemStarter (Mac OS X)
- inetd / xinetd
- crond / atd
- watchdogd

## Upstart

Cos'è:

- Sostituisce *init*
- *event-based*
- Sviluppato da Ubuntu
- Adottato da tutte le principali distribuzioni Desktop

## Caratteristiche di Upstart

- Task/Servizi avviati/fermati tramite eventi
- Eventi generati mentre Task/Servizi avviati/fermati
- Eventi mandati in broadcast
- Sistema di respawning dei servizi morti
- Comunicazione con Upstart attraverso D-BUS
- Servizi Utente

## SystemD

Cos'è:

- Service manager per Linux
- Compatibile con SysV e LSB scripts 
- Ingegnerizzato da Lennart Poettering (Red Hat)
Fornisce:

- Parallelizzazione aggressiva
- Avvio servizi tramite Socket/D-Bus
- Avvio On-Demand
- Traccia i processi con CGROUPs
- Mantiene i punti di Mount/AutoMount

## Recall: The Commandment

Non avrai altro Dio al di fuori di me

## Recall: The Commandment

![GOD](god.png)

## Parallelizzazione

![Parallelization](parallelization.png)

## Crash Course: SystemVinit

- Lanciato init -> SO pronto.
- Genera i processi necessari al sistema. (EG. getty)
- Legge le configurazioni da /etc/inittab

## Getty

![Getty](getty.png)

## Runlevel e init

Esistono 6 livelli di funzionamento:

- Runlevel 0 (speciale): sistema completamente fermo
- Runlevel 1 o S: modalità monoutente (single user mode)
- Runlevel da 2 a 5: modalità multiutente
- Runlevel 6: riavvio
    
- /etc/inittab :
    1. Indica ad init di lanciare e controllare che siano sempre attivi
       alcuni processi (ad esempio getty).
    2. Definisce cosa fa ogni runlevel.
       All'avvio il sistema si porta dal runlevel 0 fino al runlevel di default
       passando in tutti quelli intermedi. Viceversa allo shutdown.

## Esempio di inittab

    id:2:initdefault:

    l0:0:wait:/etc/init.d/rc 0
    l1:1:wait:/etc/init.d/rc 1
    l2:2:wait:/etc/init.d/rc 2
    l3:3:wait:/etc/init.d/rc 3
    l4:4:wait:/etc/init.d/rc 4
    l5:5:wait:/etc/init.d/rc 5
    l6:6:wait:/etc/init.d/rc 6

    pf::powerwait:/etc/init.d/powerfail start
    pn::powerfailnow:/etc/init.d/powerfail now
    po::powerokwait:/etc/init.d/powerfail stop

    1:2345:respawn:/sbin/getty 38400 tty1
    2:23:respawn:/sbin/getty 38400 tty2
    3:23:respawn:/sbin/getty 38400 tty3
    4:23:respawn:/sbin/getty 38400 tty4
    5:23:respawn:/sbin/getty 38400 tty5
    6:23:respawn:/sbin/getty -f /etc/issue.welcome2l 38400 tty6

## Runlevel in Debian

- Runlevel 0 è halt
- Runlevel 1 è single-user mode
- Runlevel 2 -> 5:
    - Multiutente
    - DEFAULT: Solo il 2 è utilizzato
- Runlevel 6 è riavvio

## Init Forking Order

![Init Forking Order](initfork.png)

## Init Startup

![Init Startup](initstart.png)

## Init Stop

![Init Stop](initstop.png)

## Init Script Scaffold

    #!/bin/sh

    case "$1" in
    start)
      echo "Starting!"
      ;;
    stop)
      echo "Stopping!"
      ;;
    restart)
      echo "Restarting!"
      ;;
    esac

## Controllare servizi manualmente

Dopo esserci mossi nella directory contenente gli script di servizio basterà invocarli con gli argomenti start/stop/restart.

In Debian:

- _avvia il servizio_: `/etc/init.d/service start` 
- _ferma il servizio_: `/etc/init.d/service stop` 
- _riavvia il servizio_: `/etc/init.d/service restart` 

## Comando: halt
`halt [options]`

Spegne il computer. Inserisce una note in /var/log/wtmp; se il sistema è nel runlevel 0 o 6 ferma tutti i processi; altrimenti richiama **shutdonw -h**

### Opzioni
**-d** non scrive in /var/log/wtmp.

**-f** Chiama **halt** anche se **shutdown -nf** sarebbe stato chiamato (i.e. chiama **halt** anche se non si è nel runlevel 0 o 6).

**-h** Mette l'hard disk in stand-by prima di chiamare **halt** o spegnere.

**-i** Spegne le interfacce di rete prima dell'**halt**.

**-n** Non sincronizza prima di spegnere o riavviare.

**-p** Spegne mentre si sta fermando il sistema.


## Comando: reboot

`reboot [options]`

Chiude i filesystem, spegne il sistema, successivamente riavvia. Poichè questo comando ferma istantaneamente tutti i processi, dovrebbe essere utilizzato solamente in single-user mode. Se il sistema non è nel runlevel 0 o 6, **reboot** richiama **shutdown -r**.

### Opzioni
**-f** Chiama **reboot** anche quando **shutdown** verrebbe invocato.

**-i** Spegne tutte le interfacce di rete prima di riavviare.

**-n** Non invoca **sync** prima di spegnere.

**-w** Non esegue veramente, scrive solamente il log su /var/log/wtmp.

## Comando: runlevel
`runlevel [utmp]`

Mostra il runlevel precedente e il corrente come è stato salvato in *utmp*. La locazione standard di *utmp* è in */var/run/utmp*.

## Comando: shutdown

`shutdown [options] when [message]`

Termina tutti i processi. *when* può essere un momento specifico nel formato *ore:minuti*, o un numero di minuti da aspettare nel formato *+m* o **now**. Un messaggioin broadcast viene notificato a tutti gli utenti per deautenticarli. Ai processi viene inviato un **SIGTERM** per permettergli di uscire normalmente. */etc/init* viene chiamato per effettuare lo shutdown, che consiste nel portare il sistema al runlevel 0.

### Opzioni
**-a** Quando viene chiamato da **init**, spegne solo se uno degli utente in */shutdown.allow* è loggato attualmente.

**-c** Annulla un procedimento di spegnimento in corso.

**-f** Riavvia velocemente, eliminando ogni chiamata a **fsck** quando si sta riavvindo.

**-F** Forza un controllo del filesystem al riavvio.

**-h** Manda il segnale di Halt o spegne il computer quando **shutdown** è uscito. Questo dipende dal sistema hardware e dal BIOS.

**-H** Ferma il sistema quando **shutdown** è uscito.

**-k** Stampa i messaggi di warning, ma ferma lo shutdown attuale.

**-P** Spegne il computer quando **shutdown** ha terminato.

**-r** Riavvia il sistema quando **shutdown** ha terminato.

## Comando: telinit

`telinit [options] [runlevel]`

Segnala a **init** di cambiare il runlevel di sistema. **telinit** è in SysV solamente un link a **init**, il padre di tutti i processi.

### Opzioni

**-t** *seconds* Manda un SIGKILL dopo tot secondi (*seconds*) il SIGTERM. Di default sono 20.

### Runlevels

Qualche runlevel cambia da distribuzione a distribuzione, ma alcuni sono standard:

**0** Manda il segnale di Halt

**1,s,S** Modalità single-user

**6** Riavvia il sistema

**a,b,c** Processa solo le linee in */etc/inittab/* che sono marcate con *a*, *b* o *c*

**q, Q** Rilegge */etc/inittab*

## Comando: uptime

`uptime [options]`

Stampa il tempo corrente, quanto è stato attivo il sistema, il numero di utenti attualmente loggati (che può includere il proprio utente molte volte), e il carico medio del sistema.

### Opzioni

**-V** Stampa la versione e esce.

## SysV punti a favore

- **Semplicità**: 
    * Creare servizi è facile con SystemV init come è facile creare uno script di shell. 
    * Per abilitare/disabilitare un servizio in un particolare Runlevel basta aggiungere/rimuovere un link simbolico in una directory
- **Ordine di esecuzione dei servizi garantito**: 
    * L'ordine di esecuzione è deterministico e determinato.
    * Ordine relativo dei servizi dipendente dal prefisso numerico nel nome.

## SysV svantaggi
- **Prestazioni non ottimali**: 
    * non sfrutta il parallelismo.
    * "hack" mandare il demone in background all'avvio -> dimostra il bisogno di maggiore reattività all'avvio.
- **Server Centric**:
    * I riavvii nei mainframe erano rari.
    * Utenti Desktop/Mobile sono usi a riavvii multipli durante la giornata.

## SysV svantaggi
- **Hotplug non gestito**: 
    * Progettato per non aggiungere/rimuovere risorse a runtime.
    * Non reagisce proattivamente ai cambi di sistema.
- **script esegue operazioni standard**: 
    * Esegue controlli iniziali.
    * si assicura non ci sia un'altra istanza attiva.
    * controlla non ci siano cartelle o file in utilizzo.
    * rimuovo i file temporanei.
    * si assicura che i demoni dipendenti siano in esecuzione. Ma:
        - Operazione costosa.
        - Dovrebbe essere lo stesso *init* a occuparsene.

## Crash Course: Upstart

## Job
Un job è un'unità di lavoro. In Upstart ne esistono di 3 tipi:

- Task Job: è considerato un piccolo programma/script che può impiegare anche molto tempo a terminare, ma sappiamo che terminerà in un tempo fissato. Per esempio cancellare i file temporanei dall'hard disk oppure montare i file systems
- Service Job: è un processo che rimane avviato per sempre a meno che non venga fermato esplicitamente.
- Abstract Job: è job che non ha sezioni *script* ne sezioni *exec*. Job di questo tipo possono essere avviati e stoppati ma non hanno un PID association.

## Job States

![Upstart Job States](upstart-states.png)

## File di Configurazione

Ogni Job è definito in un file di configurazione in plain text. I file di configurazione hanno un nome simile a:

`<name>.conf`

### System Job## SysV svantaggi

Ogni Job di sistema è contenuto di default nella cartella:

`/etc/init`

### User Job

Gli User JOB sono contenuti nella cartella:

'$HOME/.init/'

Tuttavia non sono attivi di default.

## Job Example

    # Un Job astratto può anche non contenere nessuna linea
    # Per informazione inseriamo l'autore del JOB
    author "foo"
    # E qui sotto la descrizione del job stesso
    description "questo è uno scaffold di job astratto"
    # Questo è una JOB configuration completa

## Comando: initctl
`initctl [options] command`

**initctl** manda comandi al demone **init** Upstart. Usabile per monitorare Jobs e Eventi, chiamare Jobs direttamente o mandare eventi al sistema.

### Opzioni
**--no-wait** Quando stiamo usando il comando **start**, **stop**, **emit**, esce immediatamente senza aspettare che la richiesta sia finita.

**--user** Viene avviato in user-mode

### Comandi

**list**

**emit** Emette un evento al quale **init** può rispondere. Gli argomenti dell'evento possono essere passati in una lista di stringhe.

**list** elenca tutti i Job conosciuti.

**start JOB** avvia un Job con il nome JOB

**stop JOB** ferma un Job con il nome JOB

**restart JOB** riavvia un Job con il nome JOB

**reload JOB** invia il segnale HUP al Job con il nome JOB

**status JOB** visualizza lo stato del Job con il nome JOB

## Events

Anche degli eventi esistono 3 incarnazioni.

Per generare gli eventi viene usato initctl.

### Segnali

I segnali sono eventi lanciati in maniera asincrona. Colui che annuncia questi eventi non aspetta che l'evento venga passato a tutti, ne aspetta la loro reazione.

Per inviare segnali bisogna invocare il comando:

`initctl emit --no-wait SIGNAL`

### Metodi

Gli eventi metodo sono degli eventi sincroni che sono solitamente associati a dei task. Funzionano come metodi o chiamate a funzione.

Per emettere un evento metodo basta:

`initctl emit METHOD`
 
### Hooks

Sono degli speciali segnali sincroni a cui non ci si aspetta che risponda nessuno con compiti "lunghi". Ad esempio vengono usati per notificare tutti quando un Job si sta avviando; in questo caso manda un hook **starting** a tutto il sistema.

## Stanzas

Le *stanzas* è il termine utilizzato per identificare i comandi di configurazione che sono accettati da un file di configurazione di JOB di Upstart.

## Elenco Stanzas

![Stanza1](stanzas.png)

## Elenco Stanzas
![Stanza2](stanzas2.png)

## Configuration Example

Data l'estrema semplicità dei file di configurazione upstart, posso mostrarvi la configurazione completa di cron senza andare in overflow.

    # cron - regular background program processing daemon
    #
    # cron is a standard UNIX program that runs user-specified programs at
    # periodic scheduled times

    description     "regular background program processing daemon"

    start on runlevel [2345]
    stop on runlevel [!2345]

    expect fork
    respawn

    exec cron

## Cron 4 SysV

![cron](sysv-cron.png)

## Addio e grazie per tutto il pesce

![fish](fish.png)

