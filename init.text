title: Sistemi di Avvio
author: Andrea Brancaleoni


## Cos'è un Sistema di Avvio

Il compito di avviare e riavviare il computer è svolto da uno speciale componente chiamato *init*. *Init* è responsabile di terminare l'avvio dopo che il kernel è stato caricato.

*Init* Avvia altri programmi detti Demoni. Ad esempio avvia il server grafico in un sistema Desktop o un server SQL o HTTP in sistemi Server.

## Affidabilità

L'affidabilità e la sicurezza è molto importante per un demone di init dato che:

- Gira in modalità super utente.
- É responsabile di controllare servizi di sistema critici.
- Se init muore per qualsiasi ragione, il kernel va in panic.

Il sistema di init non deve essere compromesso, dato che se fallisce, il kernel va in panic. Dunque, tutte le funzionalità che non sono considerate "core" devono essere tolte e messe negli altri demoni.

## Recall: Demone

"I demoni sono personaggi della mitologia greca, alcuni dei quali eseguivano compiti di cui gli dei non potevano occuparsi" - Wikipedia

## Linea Evolutiva

- Sistemi di avvio sequenziali: sistemi di avvio in cui ogni demone è avviato in sequenza.
appartengono a questa famiglia tutti i primi sistemi di avvio dove o non si era in possesso di architetture multicore/manycore o non era necessario accendere/spegnere la macchina in continuazione ma era più importante l'uptime. (EG. System-V init, BSD-Style init)
- Sistemi di avvio gerarchici: evoluzione dei sistemi di avvio sequenziali forniscono parallelismo all'avvio inizializzando contemporaneamente servizi tra loro indipendenti. (EG: OpenRC, InitNG)
- Sistemi di avvio Startless/Event Based: spesso forniscono funzionalità simili ai sistemi di avvio gerarchico, tuttavia il loro funzionamento interno è diverso. (EG: LaunchD, Upstart, SystemD)

## Linea Evolutive

![Linee Evolutive](timeline.png)

## System-V init

System-V init è lo standard per quanto riguarda i sistemi di avvio su Linux, comprese le alternative completamente compatibili (e ovviamente su System-V). In questo senso è anche il sistema di avvio più diffuso. Il suo ruolo principlae è di creare processi da uno script in /etc/inittab.

SYSVINIT, L'implementazione più famosa, contiene anche altri programmi che gestiscono l'avvio/il riavvio/lo spegnimento del computer. Ad esempio contiene:
- reboot
- shutdown
- killall
- poweroff
- tellinit
- sulogin
- wall
- etc.

## LaunchD

LaunchD è un framework open-source per gestire avvio e spegimento di altri demoni, applicazioni, processi e script. 
È stato scritto da Dave Zarzycki alla Apple, dove è stato introdotto, per la prima volta in Mac OS X Tiger, 
era licenziato sotto Apple Public License ma, per facilitarne l'adozione, la licenza fu cambiata con la Apache.

## Caratteristiche di LaunchD
LaunchD è essenzialmente un sostituto per:

- init
- rc
- init.d script
- rc.d script
- SystemStarter (Mac OS X)
- inetd / xinetd
- crond / atd
- watchdogd

## Upstart

Upstart è un sostituto *event-based* del demone di init. Fu originariamente sviluppato per Ubuntu, ma col tempo è stato adottato
da tutte le principali distribuzioni Desktop.

## Caratteristiche di Upstart

- I Task e i Servizi sono avviati e fermati tramite eventi
- Gli eventi vengono generati mentre i servizi vengono avviati e fermati
- Gli eventi possono essere ascoltati da qualsiasi altro processo nel sistema
- I servizi possono essere riavviati se muoiono inaspettatamente
- La comunicazione con il demone di init avviene attraverso D-BUS
- Servizi Utente, che gli utenti stessi possono avviare e stoppare

## SystemD

SystemD è un service manager per Linux, compatibile con SysV e gli init scripts LSB. SystemD fornisce parallelizzazione aggressiva, usa Socket
e D-Bus per avviare i servizi, offre avvio on-demand, tiene traccia dei processi attivi con i control groups (CGROUP), mantiene i punti di mount e
automount e e implementa un elaborata logica transazionale dependency based.

## Recall: The Commandment

Non avrai altro Dio al di fuori di me

## Caratteristiche di SystemD

- Parallelizzazione estrema
- Attivazione Socket Based (inetd)
- Bus Based Activation tramite D-BUS
- Caricamento On-Demand, anche di File-System (autofs)
- No Shell Scripts
- Monitoraggio attraverso Control Groups


## Parallelizzazione

![Parallelization](parallelization.png)

## Crash Course: SystemVinit

- Una volta lanciato init, il sistema operativo è formalmente pronto.
- Init ha il compito di generare tutti gli altri processi necessari al sistema. 
Esempio classico di processo generato da init è getty (attiva il terminale e inizia la procedura di accesso).
- Init, per sapere cosa fare, utilizza come proprio file di configurazione /etc/inittab
- /etc/inittab divide i vari programmi da lanciare all'avvio in livelli di esecuzione chiamati “runlevel”.

## Getty

![Getty](getty.png)

## Runlevel e init

L'avvio dei vari processi del sistema può essere suddiviso in 6 livelli di
funzionamento

- Runlevel 0 (speciale): sistema completamente fermo
- Runlevel 1 o S: modalità monoutente (single user mode)
- Runlevel da 2 a 5: modalità multiutente
- Runlevel 6: riavvio
    
- /etc/inittab :
  1. Indica ad init di lanciare e controllare che siano sempre attivi
     alcuni processi (ad esempio getty).
  2. In generale definisce cosa fare per ciascun runlevel.
     All'avvio il sistema si porta dal runlevel 0 fino al runlevel di default
     (anche questo dichiarato in /etc/inittab come vedremo in seguito)
     passando in tutti quelli intermedi. Viceversa allo shutdown.

## Runlevel in Debian

- Runlevel 0 è halt
- Runlevel 1 è single-user mode
- Runlevel 2 -> 5 sono multiutente, di default solo il 2 è utilizzato. Gli altri sono a uso dell'utente.
- Runlevel 6 è riavvio

## Init Forking Order

![Init Forking Order](initfork.png)

## Init Startup

![Init Startup](initstart.png)

## Init Stop

![Init Stop](initstop.png)

## Init Script Scaffold

    #!/bin/sh

    case "$1" in
    start)
      echo "Starting!"
      ;;
    stop)
      echo "Stopping!"
      ;;
    restart)
      echo "Restarting!"
      ;;
    esac

## Controllare servizi manualmente

Dopo esserci mossi nella directory contente gli script di servizio basterà invocarli con gli argomenti (start|stop|restart).

In Debian:

- `/etc/init.d/service start` 

  _avvia il servizio_
- `/etc/init.d/service stop` 

  _ferma il servizio_
- `/etc/init.d/service restart` 

  _riavvia il servizio_

## Comando: halt
`halt [options]`

Spegne il computer. Inserisce una note in /var/log/wtmp; se il sistema è nel runlevel 0 o 6 ferma tutti i processi; altrimenti richiama **shutdonw -h**

### Opzioni
**-d** non scrive in /var/log/wtmp.

**-f** Chiama **halt** anche se **shutdown -nf** sarebbe stato chiamato (i.e. chiama **halt** anche se non si è nel runlevel 0 o 6).

**-h** Mette l'hard disk in stand-by prima di chiamare **halt** o spegnere.

**-i** Spegne le interfacce di rete prima dell'**halt**.

**-n** Non sincronizza prima di spegnere o riavviare.

**-p** Spegne mentre si sta fermando il sistema.


## Comando: reboot

`reboot [options]`

Chiude i filesystem, spegne il sistema, successivamente riavvia. Poichè questo comando ferma istantaneamente tutti i processi, dovrebbe essere utilizzato solamente in single-user mode. Se il sistema non è nel runlevel 0 o 6, **reboot** richiama **shutdown -r**.

### Opzioni
**-f** Chiama **reboot** anche quando **shutdown** verrebbe invocato.

**-i** Spegne tutte le interfacce di rete prima di riavviare.

**-n** Non invoca **sync** prima di spegnere.

**-w** Non esegue veramente, scrive solamente il log su /var/log/wtmp.

## Comando: runlevel
`runlevel [utmp]`

Mostra il runlevel precedente e il corrente come è stato salvato in *utmp*. La locazione standard di *utmp* è in */var/run/utmp*.

## Comando: shutdown

`shutdown [options] when [message]`

Termina tutti i processi. *when* può essere un momento specifico nel formato *ore:minuti*, o un numero di minuti da aspettare nel formato *+m* o **now**. Un messaggioin broadcast viene notificato a tutti gli utenti per deautenticarli. Ai processi viene inviato un **SIGTERM** per permettergli di uscire normalmente. */etc/init* viene chiamato per effettuare lo shutdown, che consiste nel portare il sistema al runlevel 0.

### Opzioni
**-a** Quando viene chiamato da **init**, spegne solo se uno degli utente in */shutdown.allow* è loggato attualmente.

**-c** Annulla un procedimento di spegnimento in corso.

**-f** Riavvia velocemente, eliminando ogni chiamata a **fsck** quando si sta riavvindo.

**-F** Forza un controllo del filesystem al riavvio.

**-h** Manda il segnale di Halt o spegne il computer quando **shutdown** è uscito. Questo dipende dal sistema hardware e dal BIOS.

**-H** Ferma il sistema quando **shutdown** è uscito.

**-k** Stampa i messaggi di warning, ma ferma lo shutdown attuale.

**-P** Spegne il computer quando **shutdown** ha terminato.

**-r** Riavvia il sistema quando **shutdown** ha terminato.

## Comando: telinit

`telinit [options] [runlevel]`

Segnala a **init** di cambiare il runlevel di sistema. **telinit** è in SysV solamente un link a **init**, il padre di tutti i processi.

### Opzioni

**-t** *seconds* Manda un SIGKILL dopo tot secondi (*seconds*) il SIGTERM. Di default sono 20.

### Runlevels

Qualche runlevel cambia da distribuzione a distribuzione, ma alcuni sono standard:

**0** Manda il segnale di Halt

**1,s,S** Modalità single-user

**6** Riavvia il sistema

**a,b,c** Processa solo le linee in */etc/inittab/* che sono marcate con *a*, *b* o *c*

**q, Q** Rilegge */etc/inittab*

## Comando: uptime

`uptime [options]`

Stampa il tempo corrente, quanto è stato attivo il sistema, il numero di utenti attualmente loggati (che può includere il proprio utente molte volte), e il carico medio del sistema.

### Opzioni

**-V** Stampa la versione e esce.

## SysV punti a favore

- Semplicità: Creare file di servizi è facile con SystemV init come è facile creare uno script di shell. Per abilitare o disabilitare un servizio in un particolare Runlevel c'è solo bisogno di aggiungere/rimuovere un link simbolico in un particolare insieme di directory
- Ordine di esecuzione dei servizi garantito: questo è possibile invocando gli init script puntati dai link simbolici in sequenza. L'ordine relativo in cui i servizi sono invocati da init dipende da un prefisso numerico nel nome. Servizi con numeri bassi sono avviati prima di servizi con numeri alti.

## SysV svantaggi
- Prestazioni non ottimali: quando fu introdotto il sistema di avvio init era appropriato, ma in moderni sistemi sembra "lento" nel senso che non sfrutta il parallelismo. Un "hack" utilizzata da molti Amministratori è di evitare la serializzazione mandando in background i servizi che si stanno aviando.
- Server Centric: quando i Computer venivano ancora chiamati Mainframe e i riavvii erano rari, l'approccio di SysV era perfetto. Ora buona parte degli utenti Linux Desktop o Mobile, che usano il dispositivo in mobilità, si aspettano di riavviare il computer anche molte volte durante la giornata.
- Assume inesistenza di device HotPlug: SysV assume non sia possibile aggiungere/rimuovere una risorsa hardware a runtime. Per questo è stato progettato per non reagire proattivamente.
- Ogni script esegue operazioni standard: Ad esempio, eseguono controlli iniziali, si assicurano non ci sia un'altra istanza attiva del servizio, controllano non ci siano cartello o file in utilizzo, rimuovo la cache vecchia, si assicurano che i demoni dipendenti siano in esecuzione e lanciano il servizio. La cosa più difficile e costosa è controllare se i demoni dipendenti sono avviati. La specifica LSB contiene degli helper che aiutano a svolgere queste operazioni, ma probabilmente dovrebbe essere il demone di Init a svolgerle.

## Crash Course: Upstart

## Job
Un job è un'unità di lavoro. In Upstart ne esistono di 3 tipi:

- Task Job: è considerato un piccolo programma/script che può impiegare anche molto tempo a terminare, ma sappiamo che terminerà in un tempo fissato. Per esempio cancellare i file temporanei dall'hard disk oppure montare i file systems
- Service Job: è un processo che rimane avviato per sempre a meno che non venga fermato esplicitamente.
- Abstract Job: è job che non ha sezioni *script* ne sezioni *exec*. Job di questo tipo possono essere avviati e stoppati ma non hanno un PID association.

## Job States

![Upstart Job States](upstart-states.png)

## File di Configurazione

Ogni Job è definito in un file di configurazione in plain text. I file di configurazione hanno un nome simile a:

`<name>.conf`

### System Job

Ogni Job di sistema è contenuto di default nella cartella:

`/etc/init`

### User Job

Gli User JOB sono contenuti nella cartella:

'$HOME/.init/'

Tuttavia non sono attivi di default.

## Job Example

    # Un Job astratto può anche non contenere nessuna linea
    # Per informazione inseriamo l'autore del JOB
    author "foo"
    # E qui sotto la descrizione del job stesso
    description "questo è uno scaffold di job astratto"
    # Questo è una JOB configuration completa

## Comando: initctl
`initctl [options] command`

**initctl** manda comandi al demone **init** Upstart. Usabile per monitorare Jobs e Eventi, chiamare Jobs direttamente o mandare eventi al sistema.

### Opzioni
**--no-wait** Quando stiamo usando il comando **start**, **stop**, **emit**, esce immediatamente senza aspettare che la richiesta sia finita.

**--user** Viene avviato in user-mode

### Comandi

**list**

**emit** Emette un evento al quale **init** può rispondere. Gli argomenti dell'evento possono essere passati in una lista di stringhe.

**list** elenca tutti i Job conosciuti.

**start JOB** avvia un Job con il nome JOB

**stop JOB** ferma un Job con il nome JOB

**restart JOB** riavvia un Job con il nome JOB

**reload JOB** invia il segnale HUP al Job con il nome JOB

**status JOB** visualizza lo stato del Job con il nome JOB

## Events

Anche degli eventi esistono 3 incarnazioni.

Per generare gli eventi viene usato initctl.

### Segnali

I segnali sono eventi lanciati in maniera asincrona. Colui che annuncia questi eventi non aspetta che l'evento venga passato a tutti, ne aspetta la loro reazione.

Per inviare segnali bisogna invocare il comando:

`initctl emit --no-wait SIGNAL`

### Metodi

Gli eventi metodo sono degli eventi sincroni che sono solitamente associati a dei task. Funzionano come metodi o chiamate a funzione.

Per emettere un evento metodo basta:

`initctl emit METHOD`
 
### Hooks

Sono degli speciali segnali sincroni a cui non ci si aspetta che risponda nessuno con compiti "lunghi". Ad esempio vengono usati per notificare tutti quando un Job si sta avviando; in questo caso manda un hook **starting** a tutto il sistema.

## Stanzas

Le *stanzas* è il termine utilizzato per identificare i comandi di configurazione che sono accettati da un file di configurazione di JOB di Upstart.

## Elenco Stanzas

![Stanza1](stanzas.png)

## Elenco Stanzas
![Stanza2](stanzas2.png)

## Configuration Example

Data l'estrema semplicità dei file di configurazione upstart, posso mostrarvi la configurazione completa di cron senza andare in overflow.

    # cron - regular background program processing daemon
    #
    # cron is a standard UNIX program that runs user-specified programs at
    # periodic scheduled times

    description     "regular background program processing daemon"

    start on runlevel [2345]
    stop on runlevel [!2345]

    expect fork
    respawn

    exec cron

## Cron 4 SysV

![cron](sysv-cron.png)

## Addio e grazie per tutto il pesce

![fish](fish.png)

